// --- Auto Generated by BanTanger ---
package com.bantanger.domain.template.selectdict.service;

import com.bantanger.common.enums.CodeEnum;
import com.bantanger.common.exception.BusinessException;
import com.bantanger.common.model.PageRequestWrapper;
import com.bantanger.domain.template.selectdict.SelectDict;
import com.bantanger.domain.template.selectdict.creator.SelectDictCreator;
import com.bantanger.domain.template.selectdict.mapper.SelectDictMapper;
import com.bantanger.domain.template.selectdict.query.SelectDictQuery;
import com.bantanger.domain.template.selectdict.repository.SelectDictRepository;
import com.bantanger.domain.template.selectdict.updater.SelectDictUpdater;
import com.bantanger.domain.template.selectdict.vo.SelectDictVO;
import com.bantanger.jpa.support.EntityOperations;
import com.querydsl.core.BooleanBuilder;
import java.lang.Long;
import java.lang.Override;
import java.util.Optional;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Transactional
@Service
@Slf4j
@RequiredArgsConstructor
public class SelectDictServiceImpl implements ISelectDictService {
   private final SelectDictRepository selectDictRepository;

   /**
    * createImpl
    */
   @Override
   public Long createSelectDict(SelectDictCreator creator) {
      Optional<SelectDict> selectDict = EntityOperations.doCreate(selectDictRepository)
      .create(() -> SelectDictMapper.INSTANCE.dtoToEntity(creator))
      .update(e -> e.init())
      .execute();
      return selectDict.isPresent() ? selectDict.get().getId() : 0;
   }

   /**
    * update
    */
   @Override
   public void updateSelectDict(SelectDictUpdater updater) {
      EntityOperations.doUpdate(selectDictRepository)
      .loadById(updater.getId())
      .update(e -> updater.updateSelectDict(e))
      .execute();
   }

   /**
    * valid
    */
   @Override
   public void validSelectDict(Long id) {
      EntityOperations.doUpdate(selectDictRepository)
      .loadById(id)
      .update(e -> e.valid())
      .execute();
   }

   /**
    * invalid
    */
   @Override
   public void invalidSelectDict(Long id) {
      EntityOperations.doUpdate(selectDictRepository)
      .loadById(id)
      .update(e -> e.invalid())
      .execute();
   }

   /**
    * findById
    */
   @Override
   public SelectDictVO findById(Long id) {
      Optional<SelectDict> selectDict =  selectDictRepository.findById(id);
      return new SelectDictVO(selectDict.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
   }

   /**
    * findByPage
    */
   @Override
   public Page<SelectDictVO> findByPage(PageRequestWrapper<SelectDictQuery> query) {
      BooleanBuilder booleanBuilder = new BooleanBuilder();
      Page<SelectDict> page = selectDictRepository.findAll(booleanBuilder,
              PageRequest.of(query.getPage() - 1, query.getPageSize(),
              Sort.by(Sort.Direction.DESC, "createdAt")));
      return new PageImpl<>(page.getContent().stream().map(SelectDictVO::new)
              .collect(Collectors.toList()), page.getPageable(), page.getTotalElements());
   }
}
