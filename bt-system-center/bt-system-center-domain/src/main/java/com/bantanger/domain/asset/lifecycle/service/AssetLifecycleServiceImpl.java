// --- Auto Generated by BanTanger ---
package com.bantanger.domain.asset.lifecycle.service;

import cn.hutool.core.collection.IterUtil;
import com.bantanger.common.enums.CodeEnum;
import com.bantanger.common.enums.ValidStatus;
import com.bantanger.common.exception.BusinessException;
import com.bantanger.common.model.PageRequestWrapper;
import com.bantanger.domain.asset.lifecycle.AssetLifecycle;
import com.bantanger.domain.asset.lifecycle.QAssetLifecycle;
import com.bantanger.domain.asset.lifecycle.creator.AssetLifecycleCreator;
import com.bantanger.domain.asset.lifecycle.mapper.AssetLifecycleMapper;
import com.bantanger.domain.asset.lifecycle.query.AssetLifecycleQuery;
import com.bantanger.domain.asset.lifecycle.repository.AssetLifecycleRepository;
import com.bantanger.domain.asset.lifecycle.updater.AssetLifecycleUpdater;
import com.bantanger.domain.asset.lifecycle.vo.AssetLifecycleVO;
import com.bantanger.jpa.support.EntityOperations;
import com.querydsl.core.BooleanBuilder;
import java.lang.Long;
import java.lang.Override;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Transactional
@Service
@Slf4j
@RequiredArgsConstructor
public class AssetLifecycleServiceImpl implements IAssetLifecycleService {
   private final AssetLifecycleRepository assetLifecycleRepository;

   @Override
   public void batchCreateLifecycle(String batchNo, List<AssetLifecycleCreator> creatorList) {
      // todo 想要提升性能，可以查缓存
      Iterable<AssetLifecycle> all = assetLifecycleRepository.findAll(new BooleanBuilder()
          .and(QAssetLifecycle.assetLifecycle.genBatchNo.eq(batchNo)));
      // 如果数据库已经有该批次，则无需插入
      if (IterUtil.isNotEmpty(all)) {
         return ;
      }
      List<AssetLifecycle> assetLifecycleList = creatorList.stream()
          .map(code -> {
             AssetLifecycle assetLifecycle = AssetLifecycleMapper.INSTANCE.dtoToEntity(code);
             assetLifecycle.setValidStatus(ValidStatus.VALID);
             return assetLifecycle;
          }).collect(Collectors.toList());
      assetLifecycleRepository.saveAll(assetLifecycleList);
   }

   /**
    * createImpl
    */
   @Override
   public Long createAssetLifecycle(AssetLifecycleCreator creator) {
      Optional<AssetLifecycle> assetLifecycle = EntityOperations.doCreate(assetLifecycleRepository)
      .create(() -> AssetLifecycleMapper.INSTANCE.dtoToEntity(creator))
      .update(e -> e.init())
      .execute();
      return assetLifecycle.isPresent() ? assetLifecycle.get().getId() : 0;
   }

   /**
    * update
    */
   @Override
   public void updateAssetLifecycle(AssetLifecycleUpdater updater) {
      EntityOperations.doUpdate(assetLifecycleRepository)
      .loadById(updater.getId())
      .update(e -> updater.updateAssetLifecycle(e))
      .execute();
   }

   /**
    * valid
    */
   @Override
   public void validAssetLifecycle(Long id) {
      EntityOperations.doUpdate(assetLifecycleRepository)
      .loadById(id)
      .update(e -> e.valid())
      .execute();
   }

   /**
    * invalid
    */
   @Override
   public void invalidAssetLifecycle(Long id) {
      EntityOperations.doUpdate(assetLifecycleRepository)
      .loadById(id)
      .update(e -> e.invalid())
      .execute();
   }

   /**
    * findById
    */
   @Override
   public AssetLifecycleVO findById(Long id) {
      Optional<AssetLifecycle> assetLifecycle =  assetLifecycleRepository.findById(id);
      return new AssetLifecycleVO(assetLifecycle.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
   }

   /**
    * findByPage
    */
   @Override
   public Page<AssetLifecycleVO> findByPage(PageRequestWrapper<AssetLifecycleQuery> query) {
      BooleanBuilder booleanBuilder = new BooleanBuilder();
      Page<AssetLifecycle> page = assetLifecycleRepository.findAll(booleanBuilder,
              PageRequest.of(query.getPage() - 1, query.getPageSize(),
              Sort.by(Sort.Direction.DESC, "createdAt")));
      return new PageImpl<>(page.getContent().stream().map(AssetLifecycleVO::new)
              .collect(Collectors.toList()), page.getPageable(), page.getTotalElements());
   }
}
