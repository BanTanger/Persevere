// --- Auto Generated by BanTanger ---
package com.bantanger.domain.asset.record.service;

import cn.hutool.core.collection.IterUtil;
import com.bantanger.common.enums.CodeEnum;
import com.bantanger.common.exception.BusinessException;
import com.bantanger.common.model.PageRequestWrapper;
import com.bantanger.domain.asset.record.AssetInOutRecord;
import com.bantanger.domain.asset.record.AssetRecordDetail;
import com.bantanger.domain.asset.record.QAssetInOutRecord;
import com.bantanger.domain.asset.record.creator.AssetInOutRecordCreator;
import com.bantanger.domain.asset.record.mapper.AssetInOutRecordMapper;
import com.bantanger.domain.asset.record.query.AssetInOutRecordQuery;
import com.bantanger.domain.asset.record.repository.AssetInOutRecordRepository;
import com.bantanger.domain.asset.record.repository.AssetRecordDetailRepository;
import com.bantanger.domain.asset.record.vo.AssetInOutRecordVO;
import com.bantanger.jpa.support.EntityOperations;
import com.querydsl.core.BooleanBuilder;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Transactional
@Service
@Slf4j
@RequiredArgsConstructor
public class AssetInOutRecordServiceImpl implements IAssetInOutRecordService {

    private final AssetInOutRecordRepository assetInOutRecordRepository;
    private final AssetRecordDetailRepository assetRecordDetailRepository;

    @Override
    public Long createAssetInOutRecord(List<String> uniqueCodes, AssetInOutRecordCreator creator) {
        String genBatchNo = creator.getGenBatchNo();
        Iterable<AssetInOutRecord> all = assetInOutRecordRepository.findAll(new BooleanBuilder()
            .and(QAssetInOutRecord.assetInOutRecord.genBatchNo.eq(genBatchNo)));

        if (IterUtil.isNotEmpty(all)) {
            return 0L;
        }
        Optional<AssetInOutRecord> assetInOutRecord = EntityOperations
            .doCreate(assetInOutRecordRepository)
            .create(() -> AssetInOutRecordMapper.INSTANCE.dtoToEntity(creator))
            .update(e -> e.init())
            .execute();

        List<AssetRecordDetail> assetRecordDetailList = uniqueCodes.stream()
            .map(code -> {
                AssetRecordDetail assetRecordDetail = new AssetRecordDetail();
                assetRecordDetail.setRecordId(assetInOutRecord.get().getId());
                assetRecordDetail.setUniqueCode(code);
                return assetRecordDetail;
            }).collect(Collectors.toList());
        assetRecordDetailRepository.saveAll(assetRecordDetailList);

        return assetInOutRecord.isPresent() ? assetInOutRecord.get().getId() : 0L;
    }

    /**
     * findById
     */
    @Override
    public AssetInOutRecordVO findById(Long id) {
        Optional<AssetInOutRecord> assetInOutRecord = assetInOutRecordRepository.findById(id);
        return new AssetInOutRecordVO(
            assetInOutRecord.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
    }

    /**
     * findByPage
     */
    @Override
    public Page<AssetInOutRecordVO> findByPage(PageRequestWrapper<AssetInOutRecordQuery> query) {
        BooleanBuilder booleanBuilder = new BooleanBuilder();
        Page<AssetInOutRecord> page = assetInOutRecordRepository.findAll(booleanBuilder,
            PageRequest.of(query.getPage() - 1, query.getPageSize(),
                Sort.by(Sort.Direction.DESC, "createdAt")));
        return new PageImpl<>(page.getContent().stream().map(AssetInOutRecordVO::new)
            .collect(Collectors.toList()), page.getPageable(), page.getTotalElements());
    }
}
