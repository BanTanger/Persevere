// --- Auto Generated by BanTanger ---
package com.bantanger.trigger.http.permission;

import com.bantanger.api.permission.resource.request.ResourceCreateRequest;
import com.bantanger.api.permission.resource.request.ResourceQueryRequest;
import com.bantanger.api.permission.resource.request.ResourceUpdateRequest;
import com.bantanger.api.permission.resource.response.ResourceResponse;
import com.bantanger.common.enums.CodeEnum;
import com.bantanger.common.model.JsonObject;
import com.bantanger.common.model.PageRequestWrapper;
import com.bantanger.common.model.PageResult;
import com.bantanger.domain.permission.resource.creator.ResourceCreator;
import com.bantanger.domain.permission.resource.mapper.ResourceMapper;
import com.bantanger.domain.permission.resource.query.ResourceQuery;
import com.bantanger.domain.permission.resource.service.IResourceService;
import com.bantanger.domain.permission.resource.updater.ResourceUpdater;
import com.bantanger.domain.permission.resource.vo.ResourceVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("resource/v1/")
@RequiredArgsConstructor
public class ResourceController {
   private final IResourceService resourceService;

   /**
    * createRequest
    */
   @PostMapping("createResource")
   public JsonObject<Long> createResource(@RequestBody ResourceCreateRequest request) {
      ResourceCreator creator = ResourceMapper.INSTANCE.request2Dto(request);
      return JsonObject.success(resourceService.createResource(creator));
   }

   /**
    * update request
    */
   @PostMapping("updateResource")
   public JsonObject<String> updateResource(@RequestBody ResourceUpdateRequest request) {
      ResourceUpdater updater = ResourceMapper.INSTANCE.request2Updater(request);
      resourceService.updateResource(updater);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * valid
    */
   @PostMapping("valid/{id}")
   public JsonObject<String> validResource(@PathVariable Long id) {
      resourceService.validResource(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * invalid
    */
   @PostMapping("invalid/{id}")
   public JsonObject<String> invalidResource(@PathVariable Long id) {
      resourceService.invalidResource(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * findById
    */
   @GetMapping("findById/{id}")
   public JsonObject<ResourceResponse> findById(@PathVariable Long id) {
      ResourceVO vo = resourceService.findById(id);
      ResourceResponse response = ResourceMapper.INSTANCE.vo2CustomResponse(vo);
      return JsonObject.success(response);
   }

   /**
    * findByPage request
    */
   @PostMapping("findByPage")
   public JsonObject<PageResult<ResourceResponse>> findByPage(
         @RequestBody PageRequestWrapper<ResourceQueryRequest> request) {
      PageRequestWrapper<ResourceQuery> wrapper = new PageRequestWrapper<>();
      wrapper.setBean(ResourceMapper.INSTANCE.request2Query(request.getBean()));
      wrapper.setSorts(request.getSorts());
          wrapper.setPageSize(request.getPageSize());
          wrapper.setPage(request.getPage());
      Page<ResourceVO> page = resourceService.findByPage(wrapper);
      return JsonObject.success(
              PageResult.of(
                  page.getContent().stream()
                      .map(vo -> ResourceMapper.INSTANCE.vo2CustomResponse(vo))
                      .collect(Collectors.toList()),
                  page.getTotalElements(),
                  page.getSize(),
                  page.getNumber())
          );
   }
}
