// --- Auto Generated by BanTanger ---
package com.bantanger.trigger.http.asset;

import com.bantanger.api.asset.lifecycle.request.AssetLifecycleCreateRequest;
import com.bantanger.api.asset.lifecycle.request.AssetLifecycleQueryRequest;
import com.bantanger.api.asset.lifecycle.request.AssetLifecycleUpdateRequest;
import com.bantanger.api.asset.lifecycle.response.AssetLifecycleResponse;
import com.bantanger.common.constants.CodeEnum;
import com.bantanger.common.model.JsonObject;
import com.bantanger.common.model.PageRequestWrapper;
import com.bantanger.common.model.PageResult;
import com.bantanger.domain.asset.lifecycle.creator.AssetLifecycleCreator;
import com.bantanger.domain.asset.lifecycle.mapper.AssetLifecycleMapper;
import com.bantanger.domain.asset.lifecycle.query.AssetLifecycleQuery;
import com.bantanger.domain.asset.lifecycle.service.IAssetLifecycleService;
import com.bantanger.domain.asset.lifecycle.updater.AssetLifecycleUpdater;
import com.bantanger.domain.asset.lifecycle.vo.AssetLifecycleVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("assetLifecycle/v1/")
@RequiredArgsConstructor
public class AssetLifecycleController {
   private final IAssetLifecycleService assetLifecycleService;

   /**
    * createRequest
    */
   @PostMapping("createAssetLifecycle")
   public JsonObject<Long> createAssetLifecycle(@RequestBody AssetLifecycleCreateRequest request) {
      AssetLifecycleCreator creator = AssetLifecycleMapper.INSTANCE.request2Dto(request);
      return JsonObject.success(assetLifecycleService.createAssetLifecycle(creator));
   }

   /**
    * update request
    */
   @PostMapping("updateAssetLifecycle")
   public JsonObject<String> updateAssetLifecycle(
         @RequestBody AssetLifecycleUpdateRequest request) {
      AssetLifecycleUpdater updater = AssetLifecycleMapper.INSTANCE.request2Updater(request);
      assetLifecycleService.updateAssetLifecycle(updater);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * valid
    */
   @PostMapping("valid/{id}")
   public JsonObject<String> validAssetLifecycle(@PathVariable Long id) {
      assetLifecycleService.validAssetLifecycle(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * invalid
    */
   @PostMapping("invalid/{id}")
   public JsonObject<String> invalidAssetLifecycle(@PathVariable Long id) {
      assetLifecycleService.invalidAssetLifecycle(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * findById
    */
   @GetMapping("findById/{id}")
   public JsonObject<AssetLifecycleResponse> findById(@PathVariable Long id) {
      AssetLifecycleVO vo = assetLifecycleService.findById(id);
      AssetLifecycleResponse response = AssetLifecycleMapper.INSTANCE.vo2CustomResponse(vo);
      return JsonObject.success(response);
   }

   /**
    * findByPage request
    */
   @PostMapping("findByPage")
   public JsonObject<PageResult<AssetLifecycleResponse>> findByPage(
         @RequestBody PageRequestWrapper<AssetLifecycleQueryRequest> request) {
      PageRequestWrapper<AssetLifecycleQuery> wrapper = new PageRequestWrapper<>();
      wrapper.setBean(AssetLifecycleMapper.INSTANCE.request2Query(request.getBean()));
      wrapper.setSorts(request.getSorts());
          wrapper.setPageSize(request.getPageSize());
          wrapper.setPage(request.getPage());
      Page<AssetLifecycleVO> page = assetLifecycleService.findByPage(wrapper);
      return JsonObject.success(
              PageResult.of(
                  page.getContent().stream()
                      .map(vo -> AssetLifecycleMapper.INSTANCE.vo2CustomResponse(vo))
                      .collect(Collectors.toList()),
                  page.getTotalElements(),
                  page.getSize(),
                  page.getNumber())
          );
   }
}
