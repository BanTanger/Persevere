// --- Auto Generated by BanTanger ---
package com.bantanger.trigger.http.template;

import com.bantanger.api.template.templateitem.request.TemplateItemCreateRequest;
import com.bantanger.api.template.templateitem.request.TemplateItemQueryRequest;
import com.bantanger.api.template.templateitem.request.TemplateItemUpdateRequest;
import com.bantanger.api.template.templateitem.response.TemplateItemResponse;
import com.bantanger.common.enums.CodeEnum;
import com.bantanger.common.model.JsonObject;
import com.bantanger.common.model.PageRequestWrapper;
import com.bantanger.common.model.PageResult;
import com.bantanger.domain.template.templateitem.creator.TemplateItemCreator;
import com.bantanger.domain.template.templateitem.mapper.TemplateItemMapper;
import com.bantanger.domain.template.templateitem.query.TemplateItemQuery;
import com.bantanger.domain.template.templateitem.service.ITemplateItemService;
import com.bantanger.domain.template.templateitem.updater.TemplateItemUpdater;
import com.bantanger.domain.template.templateitem.vo.TemplateItemVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("templateItem/v1/")
@RequiredArgsConstructor
public class TemplateItemController {
   private final ITemplateItemService templateItemService;

   /**
    * createRequest
    */
   @PostMapping("createTemplateItem")
   public JsonObject<Long> createTemplateItem(@RequestBody TemplateItemCreateRequest request) {
      TemplateItemCreator creator = TemplateItemMapper.INSTANCE.request2Dto(request);
      return JsonObject.success(templateItemService.createTemplateItem(creator));
   }

   /**
    * update request
    */
   @PostMapping("updateTemplateItem")
   public JsonObject<String> updateTemplateItem(@RequestBody TemplateItemUpdateRequest request) {
      TemplateItemUpdater updater = TemplateItemMapper.INSTANCE.request2Updater(request);
      templateItemService.updateTemplateItem(updater);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * valid
    */
   @PostMapping("valid/{id}")
   public JsonObject<String> validTemplateItem(@PathVariable Long id) {
      templateItemService.validTemplateItem(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * invalid
    */
   @PostMapping("invalid/{id}")
   public JsonObject<String> invalidTemplateItem(@PathVariable Long id) {
      templateItemService.invalidTemplateItem(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * findById
    */
   @GetMapping("findById/{id}")
   public JsonObject<TemplateItemResponse> findById(@PathVariable Long id) {
      TemplateItemVO vo = templateItemService.findById(id);
      TemplateItemResponse response = TemplateItemMapper.INSTANCE.vo2CustomResponse(vo);
      return JsonObject.success(response);
   }

   /**
    * findByPage request
    */
   @PostMapping("findByPage")
   public JsonObject<PageResult<TemplateItemResponse>> findByPage(
         @RequestBody PageRequestWrapper<TemplateItemQueryRequest> request) {
      PageRequestWrapper<TemplateItemQuery> wrapper = new PageRequestWrapper<>();
      wrapper.setBean(TemplateItemMapper.INSTANCE.request2Query(request.getBean()));
      wrapper.setSorts(request.getSorts());
          wrapper.setPageSize(request.getPageSize());
          wrapper.setPage(request.getPage());
      Page<TemplateItemVO> page = templateItemService.findByPage(wrapper);
      return JsonObject.success(
              PageResult.of(
                  page.getContent().stream()
                      .map(vo -> TemplateItemMapper.INSTANCE.vo2CustomResponse(vo))
                      .collect(Collectors.toList()),
                  page.getTotalElements(),
                  page.getSize(),
                  page.getNumber())
          );
   }
}
