// --- Auto Generated by BanTanger ---
package com.bantanger.trigger.http.user;

import com.bantanger.api.user.request.UserAccountCreateRequest;
import com.bantanger.api.user.request.UserAccountQueryRequest;
import com.bantanger.api.user.request.UserAccountUpdateRequest;
import com.bantanger.api.user.response.UserAccountResponse;
import com.bantanger.common.enums.CodeEnum;
import com.bantanger.common.model.JsonObject;
import com.bantanger.common.model.PageRequestWrapper;
import com.bantanger.common.model.PageResult;
import com.bantanger.domain.user.creator.UserAccountCreator;
import com.bantanger.domain.user.mapper.UserAccountMapper;
import com.bantanger.domain.user.query.UserAccountQuery;
import com.bantanger.domain.user.service.IUserAccountService;
import com.bantanger.domain.user.updater.UserAccountUpdater;
import com.bantanger.domain.user.vo.UserAccountVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("userAccount/v1/")
@RequiredArgsConstructor
public class UserAccountController {
   private final IUserAccountService userAccountService;

   /**
    * createRequest
    */
   @PostMapping("createUserAccount")
   public JsonObject<Long> createUserAccount(@RequestBody UserAccountCreateRequest request) {
      UserAccountCreator creator = UserAccountMapper.INSTANCE.request2Dto(request);
      return JsonObject.success(userAccountService.createUserAccount(creator));
   }

   /**
    * update request
    */
   @PostMapping("updateUserAccount")
   public JsonObject<String> updateUserAccount(@RequestBody UserAccountUpdateRequest request) {
      UserAccountUpdater updater = UserAccountMapper.INSTANCE.request2Updater(request);
      userAccountService.updateUserAccount(updater);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * valid
    */
   @PostMapping("valid/{id}")
   public JsonObject<String> validUserAccount(@PathVariable Long id) {
      userAccountService.validUserAccount(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * invalid
    */
   @PostMapping("invalid/{id}")
   public JsonObject<String> invalidUserAccount(@PathVariable Long id) {
      userAccountService.invalidUserAccount(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * findById
    */
   @GetMapping("findById/{id}")
   public JsonObject<UserAccountResponse> findById(@PathVariable Long id) {
      UserAccountVO vo = userAccountService.findById(id);
      UserAccountResponse response = UserAccountMapper.INSTANCE.vo2CustomResponse(vo);
      return JsonObject.success(response);
   }

   /**
    * findByPage request
    */
   @PostMapping("findByPage")
   public JsonObject<PageResult<UserAccountResponse>> findByPage(
         @RequestBody PageRequestWrapper<UserAccountQueryRequest> request) {
      PageRequestWrapper<UserAccountQuery> wrapper = new PageRequestWrapper<>();
      wrapper.setBean(UserAccountMapper.INSTANCE.request2Query(request.getBean()));
      wrapper.setSorts(request.getSorts());
          wrapper.setPageSize(request.getPageSize());
          wrapper.setPage(request.getPage());
      Page<UserAccountVO> page = userAccountService.findByPage(wrapper);
      return JsonObject.success(
              PageResult.of(
                  page.getContent().stream()
                      .map(vo -> UserAccountMapper.INSTANCE.vo2CustomResponse(vo))
                      .collect(Collectors.toList()),
                  page.getTotalElements(),
                  page.getSize(),
                  page.getNumber())
          );
   }
}
