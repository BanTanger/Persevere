// --- Auto Generated by BanTanger ---
package com.bantanger.trigger.http.message;

import com.bantanger.api.message.template.request.MessageTemplateCreateRequest;
import com.bantanger.api.message.template.request.MessageTemplateQueryRequest;
import com.bantanger.api.message.template.request.MessageTemplateUpdateRequest;
import com.bantanger.api.message.template.response.MessageTemplateResponse;
import com.bantanger.common.constants.CodeEnum;
import com.bantanger.common.model.JsonObject;
import com.bantanger.common.model.PageRequestWrapper;
import com.bantanger.common.model.PageResult;
import com.bantanger.domain.message.template.creator.MessageTemplateCreator;
import com.bantanger.domain.message.template.mapper.MessageTemplateMapper;
import com.bantanger.domain.message.template.query.MessageTemplateQuery;
import com.bantanger.domain.message.template.service.IMessageTemplateService;
import com.bantanger.domain.message.template.updater.MessageTemplateUpdater;
import com.bantanger.domain.message.template.vo.MessageTemplateVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("messageTemplate/v1/")
@RequiredArgsConstructor
public class MessageTemplateController {
   private final IMessageTemplateService messageTemplateService;

   /**
    * createRequest
    */
   @PostMapping("createMessageTemplate")
   public JsonObject<Long> createMessageTemplate(
         @RequestBody MessageTemplateCreateRequest request) {
      MessageTemplateCreator creator = MessageTemplateMapper.INSTANCE.request2Dto(request);
      return JsonObject.success(messageTemplateService.createMessageTemplate(creator));
   }

   /**
    * update request
    */
   @PostMapping("updateMessageTemplate")
   public JsonObject<String> updateMessageTemplate(
         @RequestBody MessageTemplateUpdateRequest request) {
      MessageTemplateUpdater updater = MessageTemplateMapper.INSTANCE.request2Updater(request);
      messageTemplateService.updateMessageTemplate(updater);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * valid
    */
   @PostMapping("valid/{id}")
   public JsonObject<String> validMessageTemplate(@PathVariable Long id) {
      messageTemplateService.validMessageTemplate(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * invalid
    */
   @PostMapping("invalid/{id}")
   public JsonObject<String> invalidMessageTemplate(@PathVariable Long id) {
      messageTemplateService.invalidMessageTemplate(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * findById
    */
   @GetMapping("findById/{id}")
   public JsonObject<MessageTemplateResponse> findById(@PathVariable Long id) {
      MessageTemplateVO vo = messageTemplateService.findById(id);
      MessageTemplateResponse response = MessageTemplateMapper.INSTANCE.vo2CustomResponse(vo);
      return JsonObject.success(response);
   }

   /**
    * findByPage request
    */
   @PostMapping("findByPage")
   public JsonObject<PageResult<MessageTemplateResponse>> findByPage(
         @RequestBody PageRequestWrapper<MessageTemplateQueryRequest> request) {
      PageRequestWrapper<MessageTemplateQuery> wrapper = new PageRequestWrapper<>();
      wrapper.setBean(MessageTemplateMapper.INSTANCE.request2Query(request.getBean()));
      wrapper.setSorts(request.getSorts());
          wrapper.setPageSize(request.getPageSize());
          wrapper.setPage(request.getPage());
      Page<MessageTemplateVO> page = messageTemplateService.findByPage(wrapper);
      return JsonObject.success(
              PageResult.of(
                  page.getContent().stream()
                      .map(vo -> MessageTemplateMapper.INSTANCE.vo2CustomResponse(vo))
                      .collect(Collectors.toList()),
                  page.getTotalElements(),
                  page.getSize(),
                  page.getNumber())
          );
   }
}
