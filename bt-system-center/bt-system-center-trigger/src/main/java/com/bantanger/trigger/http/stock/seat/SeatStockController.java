// --- Auto Generated by BanTanger ---
package com.bantanger.trigger.http.stock.seat;

import com.bantanger.api.stock.seat.request.SeatStockCreateRequest;
import com.bantanger.api.stock.seat.request.SeatStockQueryRequest;
import com.bantanger.api.stock.seat.request.SeatStockUpdateRequest;
import com.bantanger.api.stock.seat.response.SeatStockResponse;
import com.bantanger.common.enums.CodeEnum;
import com.bantanger.common.model.JsonObject;
import com.bantanger.common.model.PageRequestWrapper;
import com.bantanger.common.model.PageResult;
import com.bantanger.domain.stock.seat.creator.SeatStockCreator;
import com.bantanger.domain.stock.seat.mapper.SeatStockMapper;
import com.bantanger.domain.stock.seat.query.SeatStockQuery;
import com.bantanger.domain.stock.seat.service.ISeatStockService;
import com.bantanger.domain.stock.seat.updater.SeatStockUpdater;
import com.bantanger.domain.stock.seat.vo.SeatStockVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("seatStock/v1/")
@RequiredArgsConstructor
public class SeatStockController {
   private final ISeatStockService seatStockService;

   /**
    * createRequest
    */
   @PostMapping("createSeatStock")
   public JsonObject<Long> createSeatStock(@RequestBody SeatStockCreateRequest request) {
      SeatStockCreator creator = SeatStockMapper.INSTANCE.request2Dto(request);
      return JsonObject.success(seatStockService.createSeatStock(creator));
   }

   /**
    * update request
    */
   @PostMapping("updateSeatStock")
   public JsonObject<String> updateSeatStock(@RequestBody SeatStockUpdateRequest request) {
      SeatStockUpdater updater = SeatStockMapper.INSTANCE.request2Updater(request);
      seatStockService.updateSeatStock(updater);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * valid
    */
   @PostMapping("valid/{id}")
   public JsonObject<String> validSeatStock(@PathVariable Long id) {
      seatStockService.validSeatStock(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * invalid
    */
   @PostMapping("invalid/{id}")
   public JsonObject<String> invalidSeatStock(@PathVariable Long id) {
      seatStockService.invalidSeatStock(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * findById
    */
   @GetMapping("findById/{id}")
   public JsonObject<SeatStockResponse> findById(@PathVariable Long id) {
      SeatStockVO vo = seatStockService.findById(id);
      SeatStockResponse response = SeatStockMapper.INSTANCE.vo2CustomResponse(vo);
      return JsonObject.success(response);
   }

   /**
    * findByPage request
    */
   @PostMapping("findByPage")
   public JsonObject<PageResult<SeatStockResponse>> findByPage(
         @RequestBody PageRequestWrapper<SeatStockQueryRequest> request) {
      PageRequestWrapper<SeatStockQuery> wrapper = new PageRequestWrapper<>();
      wrapper.setBean(SeatStockMapper.INSTANCE.request2Query(request.getBean()));
      wrapper.setSorts(request.getSorts());
          wrapper.setPageSize(request.getPageSize());
          wrapper.setPage(request.getPage());
      Page<SeatStockVO> page = seatStockService.findByPage(wrapper);
      return JsonObject.success(
              PageResult.of(
                  page.getContent().stream()
                      .map(vo -> SeatStockMapper.INSTANCE.vo2CustomResponse(vo))
                      .collect(Collectors.toList()),
                  page.getTotalElements(),
                  page.getSize(),
                  page.getNumber())
          );
   }
}
